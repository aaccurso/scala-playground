package week4

object arrays {
  trait Expr
  case class Num(n: Int) extends Expr
  case class Var(s: String) extends Expr
  case class Sum(l: Expr, y: Expr) extends Expr
  case class Prod(l: Expr, y: Expr) extends Expr
  
  def show(e: Expr): String = e match {
  	case Num(n) => n.toString
  	case Var(s) => s
  	case Sum(l, r) => show(l) + " + " + show(r)
  	case Prod(Sum(l1,r1), Sum(l2,r2)) => "(" + show(Sum(l1,r1)) + ") * (" + show(Sum(l2,r2)) + ")"
  	case Prod(Sum(l1,r1), r) => "(" + show(Sum(l1,r1)) + ") * " + show(r)
  	case Prod(l, Sum(l2,r2)) => show(l) + " * (" + show(Sum(l2,r2)) + ")"
  	case Prod(l, r) => show(l) + " * " + show(r)
  }                                               //> show: (e: week4.arrays.Expr)String
  
  show(Prod(Num(1),Sum(Var("x"),Num(3))))         //> res0: String = 1 * (x + 3)
}